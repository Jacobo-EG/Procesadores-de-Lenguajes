
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\004" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\005" +
    "\000\002\007\005\000\002\007\007\000\002\007\005\000" +
    "\002\007\003\000\002\006\005\000\002\006\003\000\002" +
    "\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\014\021\007\022\004\023\010\024\013\025" +
    "\005\001\002\000\004\006\075\001\002\000\004\014\073" +
    "\001\002\000\004\013\072\001\002\000\004\006\067\001" +
    "\002\000\004\006\064\001\002\000\004\013\063\001\002" +
    "\000\016\002\061\021\007\022\004\023\010\024\013\025" +
    "\005\001\002\000\004\006\015\001\002\000\016\002\uffff" +
    "\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\001\002\000" +
    "\022\004\020\006\024\010\022\021\007\022\004\023\010" +
    "\024\013\025\016\001\002\000\016\007\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\001\002\000\016\007\ufff2" +
    "\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\001\002\000" +
    "\006\004\040\026\037\001\002\000\014\007\056\015\026" +
    "\016\027\017\031\020\030\001\002\000\006\004\040\026" +
    "\037\001\002\000\016\007\ufff3\013\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\001\002\000\022\004\020\006\024\010" +
    "\022\021\007\022\004\023\010\024\013\025\016\001\002" +
    "\000\014\007\032\015\026\016\027\017\031\020\030\001" +
    "\002\000\022\004\020\006\024\010\022\021\007\022\004" +
    "\023\010\024\013\025\016\001\002\000\022\004\020\006" +
    "\024\010\022\021\007\022\004\023\010\024\013\025\016" +
    "\001\002\000\022\004\020\006\024\010\022\021\007\022" +
    "\004\023\010\024\013\025\016\001\002\000\022\004\020" +
    "\006\024\010\022\021\007\022\004\023\010\024\013\025" +
    "\016\001\002\000\016\007\ufff4\013\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\001\002\000\016\007\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\001\002\000\016\007\ufff7" +
    "\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\001\002\000" +
    "\016\007\ufff5\013\ufff5\015\ufff5\016\ufff5\017\031\020\030" +
    "\001\002\000\016\007\ufff6\013\ufff6\015\ufff6\016\ufff6\017" +
    "\031\020\030\001\002\000\012\005\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\001\002\000\004\026\037\001\002\000\012\005" +
    "\uffeb\011\uffeb\012\047\013\uffeb\001\002\000\010\011\044" +
    "\012\043\013\045\001\002\000\004\004\051\001\002\000" +
    "\016\007\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\001\002\000\004\026\037\001\002\000\012\005\uffee\011" +
    "\uffee\012\047\013\uffee\001\002\000\004\026\050\001\002" +
    "\000\012\005\uffea\011\uffea\012\uffea\013\uffea\001\002\000" +
    "\004\026\037\001\002\000\006\005\053\012\047\001\002" +
    "\000\012\005\uffed\011\uffed\012\uffed\013\uffed\001\002\000" +
    "\006\005\055\012\047\001\002\000\012\005\uffec\011\uffec" +
    "\012\uffec\013\uffec\001\002\000\016\007\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\001\002\000\010\005\060" +
    "\012\043\013\045\001\002\000\016\007\uffef\013\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\001\002\000\004\002\000" +
    "\001\002\000\016\002\001\021\001\022\001\023\001\024" +
    "\001\025\001\001\002\000\016\002\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\001\002\000\022\004\020\006" +
    "\024\010\022\021\007\022\004\023\010\024\013\025\016" +
    "\001\002\000\014\007\066\015\026\016\027\017\031\020" +
    "\030\001\002\000\016\007\ufff9\013\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\001\002\000\022\004\020\006\024\010" +
    "\022\021\007\022\004\023\010\024\013\025\016\001\002" +
    "\000\014\007\071\015\026\016\027\017\031\020\030\001" +
    "\002\000\016\007\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\001\002\000\016\002\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\001\002\000\022\004\020\006\024" +
    "\010\022\021\007\022\004\023\010\024\013\025\016\001" +
    "\002\000\014\013\uffe8\015\026\016\027\017\031\020\030" +
    "\001\002\000\022\004\020\006\024\010\022\021\007\022" +
    "\004\023\010\024\013\025\016\001\002\000\014\007\077" +
    "\015\026\016\027\017\031\020\030\001\002\000\016\007" +
    "\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\012\002\011\003\013\005\005\011\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\061\005\005\011\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\020\005\016\010\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\040" +
    "\007\056\001\001\000\002\001\001\000\006\006\040\007" +
    "\041\001\001\000\002\001\001\000\010\004\024\005\016" +
    "\010\022\001\001\000\002\001\001\000\010\004\035\005" +
    "\016\010\022\001\001\000\010\004\034\005\016\010\022" +
    "\001\001\000\010\004\033\005\016\010\022\001\001\000" +
    "\010\004\032\005\016\010\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\064\005\016\010\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\067\005\016" +
    "\010\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\073\005\016\010\022\001\001" +
    "\000\002\001\001\000\010\004\075\005\016\010\022\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    double[][] matriz;
    ArrayList<ArrayList<Double>> filas = new ArrayList<>(); 
    ArrayList<Double> fila = new ArrayList<>(); 
    
    public boolean filasCorrectas(ArrayList<ArrayList<Double>> m){
        int filas = m.size();
        int i = 0;
        if(filas > 0){
            int columnas = m.get(0).size();
            while(i<filas && m.get(i).size() == columnas){
                i++;
            }
        }
        return i >= filas && filas > 0; 
    }
    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lineas ::= lineas linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lineas EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lineas ::= linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= asignacion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= funcion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcion ::= TRANSPUESTA AP data CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 matriz = Matrices.transpuesta(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= INVERSA AP data CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(m != null && Matrices.filas(m) == Matrices.columnas(m)){
                                        matriz = Matrices.inversa(m);
                                    }else{
                                        System.out.println();
                                    } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= PRINT AP data CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(m != null )
                                    Matrices.print(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= ADJUNTA AP data CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 matriz = Matrices.adjunta(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data ::= data POR data 
            {
              double[][] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] a = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] b = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 matriz = Matrices.producto(a,b); RESULT = matriz; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data ::= data DIV data 
            {
              double[][] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] a = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] b = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 matriz = Matrices.producto(a,Matrices.inversa(b)); RESULT = matriz; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data ::= data MAS data 
            {
              double[][] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] a = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] b = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 matriz = Matrices.suma(a,b); RESULT = matriz; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data ::= data MENOS data 
            {
              double[][] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] a = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] b = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 matriz = Matrices.suma(a,Matrices.producto(-1,b)); RESULT = matriz; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data ::= AP data CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data ::= lect_mat 
            {
              double[][] RESULT =null;
		 RESULT = matriz; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data ::= funcion 
            {
              double[][] RESULT =null;
		 RESULT = matriz; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lect_mat ::= IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 matriz = TablaSimbolos.buscar(id); 
                        if(matriz == null){ 
                            System.out.println(TablaSimbolos.ERROR_NOEXISTE); 
                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_mat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lect_mat ::= AC lect_filas CC 
            {
              Object RESULT =null;
		 if(filasCorrectas(filas)){ 
                                    matriz = Matrices.toArray(filas);
                                }else{
                                    System.out.println(Matrices.ERROR_FILAS);
                                }
                                filas.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_mat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lect_mat ::= ALL lect_filas CLL 
            {
              Object RESULT =null;
		 if(filasCorrectas(filas)){ 
                                    matriz = Matrices.toArray(filas);
                                }else{
                                    System.out.println(Matrices.ERROR_FILAS);
                                }
                                filas.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_mat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lect_filas ::= lect_filas PYC lect_fila 
            {
              Object RESULT =null;
		 filas.add((ArrayList<Double>) fila.clone());
                                            fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_filas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lect_filas ::= lect_filas COMA ALL lect_fila CLL 
            {
              Object RESULT =null;
		 filas.add((ArrayList<Double>) fila.clone());
                                            fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_filas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lect_filas ::= ALL lect_fila CLL 
            {
              Object RESULT =null;
		 filas.add((ArrayList<Double>) fila.clone());
                                            fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_filas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lect_filas ::= lect_fila 
            {
              Object RESULT =null;
		 filas.add((ArrayList<Double>) fila.clone());
                                            fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_filas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lect_fila ::= lect_fila COMA NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double n = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fila.add(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_fila",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lect_fila ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double n = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fila.add(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lect_fila",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion ::= IDENT ASIG data 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertar(id,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
